<?php

/**
 * @file
 * APubSub module file.
 */

/**
 * Default backend class.
 */
define('APB_DEFAULT_CLASS', '\APubSub\Backend\Drupal7\D7PubSub');

if (!class_exists('APubSub\PubSubInterface')) {
  // In case no custom autoloader is provided, use the composer one.
  // In order to use it, you need to run "composer install" in the
  // APubSub folder root.
  $autoloadFile = __DIR__ . '/../../../vendor/autoload.php';
  if (file_exists($autoloadFile)) {
    require $autoloadFile;
  }
}

/**
 * Implements hook_menu().
 */
function apb7_menu() {
  if (variable_get('apubsub_testing', FALSE)) {
    require_once __DIR__ . '/apb7.testing.inc';
    return apb7_testing_menu();
  } else {
    return array();
  }
}

/**
 * Menu helper.
 */
function apb7_test_scenario_load($id) {
  $scenario = db_select('apb_test_scenario', 't')
    ->fields('t')
    ->condition('t.id', $id)
    ->execute()
    ->fetchObject();
  if ($scenario) {
    $scenario->data = unserialize($scenario->data);
    return $scenario;
  }
  return FALSE;
}

/**
 * Menu helper, please do not use directly.
 */
function apb7_backend_load($name) {
  return apb7_backend_get($name);
}

/**
 * Get the APubSub backend
 *
 * @return \APubSub\PubSubInterface
 */
function apb7_backend_get($name = 'default') {
  static $backends = array();

  if (!isset($backends[$name])) {
    $conf = variable_get('apubsub_backend', array());

    // First fetch configuration
    if (isset($conf[$name]['class'])) {
      $class = $conf[$name]['class'];

      if (!class_exists($conf[$name]['class'])) {
        throw new InvalidArgumentException(
          sprintf("Class '%s' does not exist", $class));
      }
    } else {
      $class = APB_DEFAULT_CLASS;
    }

    // Check for options and set them if any.
    if (isset($conf[$name]['options'])) {
      $options = $conf[$name]['options'];
    } else {
      $options = null;
    }

    // Does a specific case for known backends.
    switch ($class) {

      case '\APubSub\Backend\Drupal7\D7PubSub':
        $backend = new \APubSub\Backend\Drupal7\D7PubSub(Database::getConnection());
        break;

      case '\APubSub\Backend\Predis\PredisPubSub':
        // If the Redis module is enabled, connection options will be ignored
        // and the one provided by the module will be instead.
        if (module_exists('redis')) {
          $backend = new \APubSub\Backend\Predis\PredisPubSub(Redis_Client::getClient());
          break;
        }
        // Else fallback

      default:
        $backend = new $class();
        break;
    }

    if (null !== $options) {
      $backend->setOptions($options);
    }

    $backends[$name] = $backend;
  }

  return $backends[$name];
}

/**
 * Implements hook_cron().
 */
function apb7_cron() {
  $backends = variable_get('apubsub_backend', array());
  if (isset($backends['default'])) {
    $backends['default'] = array();
  }
  foreach ($backends as $name => $options) {
    if ($backend = apb7_backend_get($name)) {
      $backend->garbageCollection();
    }
  }
}

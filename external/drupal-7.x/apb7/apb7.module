<?php

/**
 * @file
 * APubSub module file.
 */

/**
 * Default backend class.
 */
define('APB_DEFAULT_CLASS', '\APubSub\Drupal7\D7PubSub');

if (!class_exists('APubSub\PubSubInterface')) {
  // In case no custom autoloader is provided, use the composer one.
  // In order to use it, you need to run "composer install" in the
  // APubSub folder root.
  $autoloadFile = __DIR__ . '/../../../vendor/autoload.php';
  if (file_exists($autoloadFile)) {
    require $autoloadFile;
  }
}

/**
 * Implements hook_menu().
 */
function apb7_menu() {
  $items = array();

  // Administration screens.

  if (!variable_get('apubsub_testing', FALSE)) {
    // Short-circuiting!
    return $items;
  }

  // Testing stuff.
  $items['admin/messages'] = array(
    'title' => 'Messages (testing)',
    'description' => 'Play with and test APubSub API.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/messages/channels'] = array(
    'title' => 'Channels',
    'description' => 'See channel listing.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apb7_testing_channels_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Stress test UI.
  $items['admin/messages/stress'] = array(
    'title' => 'Massive stress test',
    'description' => 'Multistep interactive wizard to proceed to a massive stress test.',
    'page callback' => 'apb7_testing_volume_list',
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing-volume.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/messages/stress/add'] = array(
    'title' => 'Add scenario',
    'description' => 'Create new test scenario.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apb7_testing_volume_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing-volume.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/messages/stress/%apb7_test_scenario'] = array(
    'title' => 'View scenario',
    'page callback' => 'apb7_testing_volume_view_page',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing-volume.inc',
    'type' => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
  );
  $items['admin/messages/stress/%apb7_test_scenario/populate-channels'] = array(
    'title' => 'Populate channels',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apb7_testing_volume_scenario_populate_channels_form', 3),
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing-volume.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/messages/stress/%apb7_test_scenario/populate-messages'] = array(
    'title' => 'Populate messages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apb7_testing_volume_scenario_populate_messages_form', 3),
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing-volume.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/messages/stress/%apb7_test_scenario/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apb7_testing_volume_scenario_delete_form', 3),
    'access arguments' => array('access administration pages'),
    'file' => 'apb7.testing-volume.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Menu helper.
 */
function apb7_test_scenario_load($id) {
  $scenario = db_select('apb_test_scenario', 't')
    ->fields('t')
    ->condition('t.id', $id)
    ->execute()
    ->fetchObject();
  if ($scenario) {
    $scenario->data = unserialize($scenario->data);
    return $scenario;
  }
  return FALSE;
}

/**
 * Get the APubSub backend
 *
 * @return \APubSub\PubSubInterface
 */
function apb7_backend_get($name = 'default') {
  static $backends = array();

  if (!isset($backends[$name])) {
    $conf = variable_get('apubsub_backend', array());

    // First fetch configuration
    if (isset($conf[$name]['class'])) {
      $class = $conf[$name]['class'];

      if (!class_exists($conf[$name]['class'])) {
        throw new InvalidArgumentException(
          sprintf("Class '%s' does not exist", $class));
      }
    } else {
      $class = APB_DEFAULT_CLASS;
    }

    // Check for options and set them if any.
    if (isset($conf[$name]['options'])) {
      $options = $conf[$name]['options'];
    } else {
      $options = null;
    }

    // Does a specific case for known backends.
    switch ($class) {

      case '\APubSub\Drupal7\D7PubSub':
        $backend = new \APubSub\Drupal7\D7PubSub(Database::getConnection());
        break;

      case '\APubSub\Predis\PredisPubSub':
        // If the Redis module is enabled, connection options will be ignored
        // and the one provided by the module will be instead.
        if (module_exists('redis')) {
          $backend = new \APubSub\Predis\PredisPubSub(Redis_Client::getClient());
          break;
        }
        // Else fallback

      default:
        $backend = new $class();
        break;
    }

    if (null !== $options) {
      $backend->setOptions($options);
    }

    $backends[$name] = $backend;
  }

  return $backends[$name];
}

/**
 * Implements hook_cron().
 */
function apb7_cron() {
  $backends = variable_get('apubsub_backend', array());
  if (isset($backends['default'])) {
    $backends['default'] = array();
  }
  foreach ($backends as $name => $options) {
    if ($backend = apb7_backend_get($name)) {
      $backend->garbageCollection();
    }
  }
}

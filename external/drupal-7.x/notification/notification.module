<?php

/**
 * @file
 * APubSub Follow module file.
 *
 * User notifications will be fetched using a subscriber instance. Everything
 * will happen with this instance, and almost never using directly subscriptions
 * instead (except for some rare edge case needs).
 */

use APubSub\CursorInterface;
use APubSub\Error\ChannelDoesNotExistException;
use APubSub\Error\SubscriptionDoesNotExistException;
use APubSub\Field;
use APubSub\Notification\NotificationService;

/**
 * Register custom autoloader for the Apb\Notification namespace.
 */
spl_autoload_register(function ($className) {
  if (false !== strpos($className, '\\')) {
    $parts = explode('\\', $className);
    if ('Apb' === $parts[0] && 'Notification' === $parts[1]) {
      $filename = __DIR__ . '/lib/' . implode('/', $parts) . '.php';
      return (bool)include_once $filename;
    }
  }
  return false;
});

/**
 * Type instance info
 */
const APB_INFO_FORMATTER = 1;

/**
 * Channel instance info
 */
const APB_INFO_CHAN = 2;

/**
 * Enable AJAX for notification block variable name.
 */
const APB_VAR_ENABLE_AJAX = 'apb_follow_enable_ajax';

/**
 * Enable AJAX for notification block default value.
 */
const APB_DEF_ENABLE_AJAX = false;

/**
 * Enable production mode variable name.
 */
const APB_VAR_ENABLE_PROD = 'apb_follow_enable_prod';

/**
 * Enable production mode default value.
 */
const APB_DEF_ENABLE_PROD = true;

/**
 * Backend variable name.
 */
const APB_VAR_BACKEND = 'apb_follow_backend';

/**
 * Backend default value.
 */
const APB_DEF_BACKEND = 'default';

/**
 * Read all older messages when reading the list variable name.
 */
const APB_VAR_UNREAD_UNFOLD_ALL = 'apb_follow_unread_all_on_list';

/**
 * Read messages when unfolding the block variable name.
 */
const APB_VAR_UNREAD_UNFOLD = 'apb_follow_unread_on_click';

/**
 * Read messages when unfolding the block default value.
 */
const APB_DEF_UNREAD_UNFOLD = true;

/**
 * Store HTML inside messages variable name.
 */
const APB_VAR_ENABLE_FORMATTED_CONTENT = 'apb_follow_enable_formatted_content';

/**
 * Store HTML inside messages default value.
 */
const APB_DEF_ENABLE_FORMATTED_CONTENT = false;

/**
 * Backend variable name.
 */
const APB_VAR_USER_PAGER_LIMIT = 'apb_follow_user_pager_limit';

/**
 * Backend default value.
 */
const APB_DEF_USER_PAGER_LIMIT = 20;

/**
 * User block limit variable name.
 */
const APB_VAR_USER_BLOCK_LIMIT = 'apb_follow_user_block_limit';

/**
 * User block limit default value.
 */
const APB_DEF_USER_BLOCK_LIMIT = 8;

/**
 * Enabled types variable name.
 */
const APB_VAR_ENABLED_TYPES = 'apb_follow_enabled_types';

/**
 * Enabled types default value.
 */
const APB_DEF_ENABLED_TYPES = null;

/**
 * Notification image style variable name.
 */
const APB_VAR_IMG_STYLE = 'apb_follow_image_style';

/**
 * Notification image style default value.
 */
const APB_DEF_IMG_STYLE = 'icon-64';

/**
 * Cache types info variable name.
 */
const APB_VAR_CACHE_TYPES = 'apb_follow_cache_types';

/**
 * Cache types info default value.
 */
const APB_DEF_CACHE_TYPES = false;

/**
 * User account subscription type.
 */
const ACCOUNT_SUB = 'u';

/**
 * Build component type info using the Drupal Way (TM).
 *
 * This should never be called manually: use the manager instead.
 *
 * @see notification_service_get()
 *
 * @return array
 *   Notification types info as an internal and very specific array.
 */
function notification_type_info_get($target = APB_INFO_FORMATTER) {

  $ret  = array();

  switch ($target) {

    case APB_INFO_FORMATTER:
      $hook     = 'notification_type_info';
      $defaults = array();
      break;

    case APB_INFO_CHAN:
      $hook     = 'notification_channel_info';
      $defaults = array(
        'visible' => true,
      );
      break;

    default:
      watchdog('apb_follow', "Wrong info asked, type was: @type", array('@type' => $target), WATCHDOG_ERROR);
      return array();
  }

  $bin = 'cache_bootstrap';
  if ($cache = variable_get(APB_VAR_CACHE_TYPES, APB_DEF_CACHE_TYPES)) {
    $cid = $hook . ':' . $GLOBALS['language']->language;
    if ($cached = cache_get($cid, $bin)) {
      return $cached->data;
    }
  }

  // Fetch module-driven definitions.
  foreach (module_implements($hook) as $module) {
    foreach (module_invoke($module, $hook) as $key => $info) {

      $info += $defaults;

      // Avoid duplicates and wild overrides.
      if (isset($ret[$key])) {
        watchdog('apb_follow', "Module @module overrides the @key notification type", array(
          '@module' => $module,
          '@key'    => $key,
        ), WATCHDOG_WARNING);
      }

      if (!isset($info['description'])) {
        $info['description'] = $key;
      }

      $ret[$key] = $info;
    }
  }

  // Allow other modules to alter definition (aKa "The Drupal Way").
  drupal_alter($hook, $ret);

  if ($cache) {
    cache_set($cid , $ret, $bin);
  }

  return $ret;
}

/**
 * Implements hook_permission().
 */
function notification_permission() {
  return array(
    'follow other users' => array(
      'title'       => t("Follow other users"),
      'description' => t("Allow the user to follow other users messages."),
    ),
    'see notifications of all users' => array(
      'title'       => t("See notifications of all user profiles"),
      'description' => t("Users with this permission can manage other user's notifications, use this for moderation only."),
    ),
  );
}

/**
 * Menu access callback.
 */
function notification_user_access($account = null) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  return $account->uid
          && (
           (user_access('see notifications of all users')
           || ($account->uid == $user->uid)
           || ($account->uid !== $user->uid && user_access('follow other users')))
          );
}

/**
 * Implements hook_menu().
 */
function notification_menu() {
  $items = array();

  // User preferences and pages.
  $items['user/%user/notifications'] = array(
    'title'            => "Notifications",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('notification_page_user_list', 1),
    'access callback'  => 'notification_user_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'             => 'notification.pages.inc',
  );
  $items['user/%user/notifications/all'] = array(
    'title'            => "Notifications",
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 0,
  );
  $items['user/%user/notifications/subscriptions'] = array(
    'title'            => "Following",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('notification_page_user_subscriptions', 1),
    'access callback'  => 'notification_user_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'notification.pages.inc',
    'weight'           => 10,
  );
  $items['user/%user/notifications/settings'] = array(
    'title'            => "Preferences",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('notification_page_user_settings', 1),
    'access callback'  => 'notification_user_access',
    'access arguments' => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'notification.pages.inc',
    'weight'           => 20,
  );

  // AJAX stuff.
  $items['notification/ajax/user'] = array(
    'page callback'    => 'notification_ajax_user_notifications',
    'access callback'  => 'notification_user_access',
    'type'             => MENU_CALLBACK,
    'file'             => 'notification.ajax.inc',
  );
  $items['notification/ajax/unfold'] = array(
    'page callback'    => 'notification_ajax_unfold_notifications',
    'access callback'  => 'notification_user_access',
    'type'             => MENU_CALLBACK,
    'file'             => 'notification.ajax.inc',
  );

  // Site wide administration pages.
  $items['admin/config/people/notification'] = array(
    'title'            => "Notifications",
    'description'      => "Enable or disable notifications globally and configuration the notifications behavior.",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('notification_admin_notification_notification_types'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'notification.admin.inc',
  );
  $items['admin/config/people/notification/formatters'] = array(
    'title'            => "Formatters",
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/people/notification/chan-type'] = array(
    'title'            => "Channel types",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('notification_admin_notification_channel_types'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'notification.admin.inc',
  );
  $items['admin/config/people/notification/settings'] = array(
    'title'            => "Global settings",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('notification_admin_notification_settings'),
    'access arguments' => array('administer site configuration'),
    'weight'           => 100,
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'notification.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function notification_library() {
  $path = drupal_get_path('module', 'notification');
  return array(
    'notification' => array(
      'title'   => "Notification",
      'version' => '0.1',
      'website' => "http://github.com/pounard/apubsub",
      'js'      => array($path . '/notification.js'  => array()),
      'css'     => array($path . '/notification.css' => array()),
    ),
  );
}

/**
 * Implements hook_init().
 */
function notification_init() {
  // Force this library to exist in aggregated set of libraries.
  drupal_add_library('notification', 'notification', TRUE);
}

/**
 * Get notification manager.
 *
 * @return \APubSub\Notification\NotificationService
 */
function notification_service_get() {
  $instance = &drupal_static(__FUNCTION__);

  if (NULL === $instance) {

    $instance = new NotificationService(
        apb_backend_get(variable_get(
            APB_VAR_BACKEND,
            APB_DEF_BACKEND)),
        variable_get(
            APB_VAR_ENABLE_FORMATTED_CONTENT,
            APB_DEF_ENABLE_FORMATTED_CONTENT),
        /*variable_get(
            APB_VAR_ENABLE_PROD,
            APB_DEF_ENABLE_PROD)*/ true,
        variable_get(
            APB_VAR_ENABLED_TYPES,
            APB_DEF_ENABLED_TYPES));

    // Register all "Drupal Way (TM)" notification types.
    $formatterRegistry = $instance->getFormatterRegistry();
    foreach (notification_type_info_get(APB_INFO_FORMATTER) as $type => $info) {
      $formatterRegistry->registerType($type, $info);
    }

    // Register all "Drupal Way (TM)" channel types.
    $chanTypeRegistry = $instance->getChanTypeRegistry();
    foreach (notification_type_info_get(APB_INFO_CHAN) as $type => $info) {
      $chanTypeRegistry->registerType($type, $info);
    }

    // Allow other modules to interact with the service in order to for
    // example register contextual subscribers.
    module_invoke_all('notification_init', $instance);
  }

  return $instance;
}

/**
 * Implements hook_theme().
 */
function notification_theme() {
  return array(
    'notification_block' => array(
      'render element' => 'data',
      'template'       => 'notification-block',
    ),
    'notification_page' => array(
      'render element' => 'form',
      'template'       => 'notification-page',
      'file'           => 'notification.pages.inc'
    ),
    'notification_loader' => array(),
  );
}

/**
 * Implements hook_block_info().
 */
function notification_block_info() {
  return array(
    'notification' => array(
      'info'  => t("Current user notifications"),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 *
 * Defines styles for notification images (being displayed at various places
 * of the site). For example, 32x32 variant will be displayed in current
 * notifications block list, while the 64x64 variant will mostly be used
 * in page listings.
 */
function notification_image_default_styles() {
  return array(
    'icon-32' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 32,
            'height' => 32,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'icon-48' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 48,
            'height' => 48,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'icon-64' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 64,
            'height' => 64,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function notification_block_view($delta = '') {

  global $user;

  // No notifications possible for anonymous user.
  if (!$user->uid) {
    return;
  }

  switch ($delta) {

    case 'notification':
      $block = array(
        'content' => array(
          // Stupid Drupal is stupid, and will move out your div over the
          // block if you don't wrap it inside.
          'inside' => array(
            '#prefix' => '<div id="notifications">',
            '#suffix' => '</div>',
          ),
        ),
      );

      if (variable_get(APB_VAR_ENABLE_AJAX, APB_DEF_ENABLE_AJAX)) {
        drupal_add_js(array(
          'notification'   => array(
            'enabled'      => true,
            'refreshUrl'   => url('notification/ajax/user'),
            'unfoldUrl'    => url('notification/ajax/unfold'),
            'unfoldAction' => variable_get(APB_VAR_UNREAD_UNFOLD, APB_DEF_UNREAD_UNFOLD)
          ),
        ), 'setting');
        $block['content']['inside']['#markup'] = theme('notification_loader');
      } else {
        $block['content']['inside'] += notification_block_render($user);
      }

      return $block;
    }
}

/**
 * Render the follow form for the given account.
 */
function notification_follow_form(
  $form,
  &$form_state,
  $targetId,
  $targetType,
  $subscriberType = ACCOUNT_SUB,
  $followLabel    = null,
  $unfollowLabel  = null,
  $what           = null)
{
  global $user;

  $service    = notification_service_get();
  $chanId     = $service->getChanId($targetType, $targetId);
  $subscriber = $service->getSubscriberFor($subscriberType, $user->uid);

  $form['#what'] = null === $what ? t("this channel") : $what;

  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $chanId,
  );
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $subscriber->getId(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
  );

  try {
    $subscription = $subscriber->getSubscriptionFor($chanId);
    $form['submit']['#value'] = ($unfollowLabel ? $unfollowLabel : t("Unfollow"));
  } catch (SubscriptionDoesNotExistException $e) {
    $form['submit']['#value'] = ($followLabel ? $followLabel : t("Follow"));
  }

  if (!user_access('follow other users')) {
    // But leave it displayed to make him wanna do it!
    $form['submit']['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Follow form submit handler.
 */
function notification_follow_form_submit($form, &$form_state) {

  $chanId       = $form_state['values']['cid'];
  $subscriberId = $form_state['values']['sid'];
  $service      = notification_service_get();
  $subscriber   = $service->getSubscriber($subscriberId);

  // FIXME: This needs fixing
  //  * operation must be set in form, else submit may differ from button label
  //  * use the notification manager instead would be better

  try {
    // Throws an exception if the user is not following the channel.
    $subscriber->getSubscriptionFor($chanId);
    $service->unsubscribe($chanId, $subscriberId);
    drupal_set_message(t("You are no longer following !what", array('!what' => $form['#what'])));
  } catch (SubscriptionDoesNotExistException $e) {
    $service->subscribe($chanId, $subscriberId);
    drupal_set_message(t("You are now following !what", array('!what' => $form['#what'])));
  }
}

/**
 * Render a single image.
 *
 * @param string $uri
 * @param int $size
 *
 * @return string|array
 *   drupal_render() friendly structure.
 */
function notification_image_render($uri, $size = null) {

  $scheme = null;
  $path   = null;
  $size   = (int)$size;
  $build  = array();

  if (FALSE !== strpos($uri, '://')) {
    list($scheme, $path) = explode('://', $uri);
  }

  if (null === $scheme || 'icon' === $scheme) {
    if (!function_exists('stockicon_get')) {
      return;
    }
    if ($uri = stockicon_get()->renderIcon($path, $size . 'x' . $size)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  } else if ($style = variable_get(APB_VAR_IMG_STYLE, APB_DEF_IMG_STYLE)) {
    // Try with user driven configuration if possible.
    if ($uri = image_style_url($style, $uri)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  } else {
    // We support only a few styles for user images. Please use stock icon
    // whenever you can.
    switch ($size) {

      case 32:
      case 48:
      case 64:
        $style = 'icon-' . $size;
        break;

      default:
        return;
    }

    if ($uri = image_style_url($style, $uri)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  }

  return $build;
}

/**
 * Render the notifications for the given user account.
 *
 * @param object $account
 *   Subscriber account.
 */
function notification_block_render($account) {

  $build = array(
    '#theme' => 'notification_block',
    '#list'  => array(),
  );

  $service     = notification_service_get();
  $subscriber  = $service->getSubscriberFor(ACCOUNT_SUB, $account->uid);
  $unreadCount = 0;
  $totalCount  = 0;
  $limit       = variable_get(APB_VAR_USER_BLOCK_LIMIT, APB_DEF_USER_BLOCK_LIMIT);
  $title       = null;

  $cursor = $subscriber
    ->fetch()
    ->addSort(
      Field::MSG_SENT,
      CursorInterface::SORT_DESC)
    ->setRange($limit, 0);

  /* @var $cursor APubSub\MessageInstanceInterface[] */
  foreach ($cursor as $message) {

    $notification = $service->getNotification($message);

    ++$totalCount;

    if ($message->isUnread()) {
      ++$unreadCount;
    }

    if ($uri = $notification->getImageUri()) {
      $image = notification_image_render($uri);
    } else {
      $image = '';
    }

    $build['#list'][$message->getId()] = array(
      'id'     => $message->getId(),
      'image'  => $image,
      'time'   => $message->getSendDate()->getTimestamp(),
      'text'   => $notification->format(),
      'unread' => $message->isUnread(),
      'type'   => $notification->getType(),
    );
  }

  // Build header
  if ($unreadCount) {
    $title = format_plural(
      $unreadCount,
      "Displaying @count unread message out of @total",
      "Displaying @count unread messages out of @total",
      array(
        '@count' => $unreadCount,
        '@total' => $totalCount,
      ));
  } else {
    $title = format_plural(
      $totalCount,
      "Displaying @count message",
      "Displaying @count messages");
  }

  $build['#unread_count'] = $unreadCount;
  $build['#total_count']  = $totalCount;
  $build['#real_total']   = $cursor->getTotalCount();
  $build['#title']        = $title;

  return $build;
}

/**
 * Notifications loader, very simple.
 */
function theme_notification_loader() {

  $attributes = array(
    'title'  => t("Loading notifications..."),
    'style'  => "width: 15px; height: 15px; background: url(" . base_path() . 'misc/throbber.gif' . ") no-repeat 0 -18px;",
  );

  return '<div'. drupal_attributes($attributes) . '></div>';
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_notification_block(&$variables) {

  global $user;

  $data = $variables['data'];

  $variables += array(
    'unread_count' => $data['#unread_count'],
    'total_count'  => $data['#total_count'],
    'real_total'   => $data['#real_total'],
    'title'        => $data['#title'],
    'list'         => $data['#list'],
    'all_link'     => l(t("See all"), 'user/' . $user->uid . '/notifications', array('attributes' => array('class' => array('all-link')))),
    'pref_link'    => l(t("Preferences"), 'user/' . $user->uid . '/notifications/settings', array('attributes' => array('class' => array('pref-link')))),
  );
}

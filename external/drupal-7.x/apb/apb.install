<?php

/**
 * @file
 * APubSub module install file.
 */

/**
 * Implements hook_schema().
 */
function apb_schema() {
  $schema = array();

  $schema['apb_chan'] = array(
    'description' => "APubSub channels",
    'fields' => array(
      'id' => array(
        'description' => "Internal int32 identifier",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => "Exposed identifier",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => "Optional human readable title",
        'type' => 'varchar',
        'length' => 1024,
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => "Creation UNIX timestamp",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      // Name is the public identifier for API.
      'apb_chan_name_key' => array('name'),
    ),
    'indexes' => array(
      // Needed for load operations.
      'apb_chan_name_idx' => array('name'),
    ),
  );

  $schema['apb_msg_type'] = array(
    'description' => "APubSub message types",
    'fields' => array(
      'id' => array(
        'description' => "Internal int32 identifier",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => "Message type",
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['apb_msg'] = array(
    'description' => "APubSub messages",
    'fields' => array(
      'id' => array(
        'description' => "Internal int32 identifier",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'chan_id' => array(
        'description' => "Channel internal int32 identifier",
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type_id' => array(
        'description' => "Message type",
        'type' => 'int',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'created' => array(
        'description' => "Creation/sending UNIX timestamp",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'contents' => array(
        'description' => "Contents",
        'type' => 'text',
      ),
      'level' => array(
        'description' => "Level which can be used for any business purpose",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      // Needed for deletion.
      'apb_msg_id_idx' => array('chan_id'),
      'apb_msg_level_idx' => array('level'),
    ),
    'foreign keys' => array(
      'apb_msg_chan_id_fk' => array(
        'table' => 'apb_chan',
        'columns' => array('chan_id' => 'id'),
      ),
      'apb_msg_type_id_fk' => array(
        'table' => 'apb_msg_type',
        'columns' => array('type_id' => 'id'),
      ),
    ),
  );

  $schema['apb_sub'] = array(
    'description' => "APubSub subscriptions",
    'fields' => array(
      'id' => array(
        'description' => "Internal int32 identifier",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'chan_id' => array(
        'description' => "Channel internal int32 identifier",
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => "Is active (1 = active, 0 = inactive)",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => "Creation UNIX timestamp",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'activated' => array(
        'description' => "Latest activation UNIX timestamp",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'deactivated' => array(
        'description' => "Latest deactivation UNIX timestamp",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'extra' => array(
        'description' => "Extra data for business layer",
        'type' => 'blob',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      // Needed for admin tasks fetching, including deletion.
      'apb_sub_id_idx' => array('chan_id'),
      // Same as upper.
      'apb_sub_idx' => array('status'),
    ),
    'foreign keys' => array(
      'apb_sub_chan_id_fk' => array(
        'table' => 'apb_chan',
        'columns' => array('chan_id' => 'id'),
      ),
    ),
  );

  $schema['apb_sub_map'] = array(
    'description' => "APubSub subscribers mapping",
    'fields' => array(
      'sub_id' => array(
        'description' => "Subscription internal int32 identifier",
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => "User given identifier for the subscriber",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'accessed' => array(
        'description' => "Last time a queued job accessed this subscriber",
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    // Subscription can be owned by only one subscriber
    'primary key' => array('sub_id'),
    'indexes' => array(
      'apb_sub_map_id_idx' => array('name'),
    ),
    'foreign keys' => array(
      'apb_sub_map_sub_id_fk' => array(
        'table' => 'apb_sub',
        'columns' => array('sub_id' => 'id'),
      ),
    ),
  );

  // This implements the simple schema, where all messages are queued in the
  // same table. Another implementation with one table per channel will be done
  // but will be entirely dynamic.
  $schema['apb_queue'] = array(
    'description' => "APubSub subscriptions messages queues",
    'fields' => array(
      'id' => array(
        'description' => "Primary identifier for DELETE statements",
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'msg_id' => array(
        'description' => "Message internal int32 identifier",
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sub_id' => array(
        'description' => "Channel internal int32 identifier",
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => "Creation UNIX timestamp denormalization for performances",
        'type' => 'int',
        'not null' => TRUE,
      ),
      'unread' => array(
        'description' => "Has this message not been read",
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'read_timestamp' => array(
        'description' => "Read UNIX timestamp",
        'type' => 'int',
        'not null' => FALSE,
        'default' => NULL,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'apb_queue_sub_id_msg_id_key' => array('sub_id', 'msg_id'),
    ),
    'indexes' => array(
      // Thought that having it in primary key was sufficient? Well, no: if you
      // try to JOIN with this field, without this index, MySQL will always do
      // a full scan.
      'apb_queue_sub_id_idx' => array('sub_id'),
      // This will allow to use MySQL CONST index for ordering when fetching
      // queues, thus making the whole API being significantly faster on SELECT
      // operations. INSERT operations should be benched thought.
      'apb_queue_msg_id_created_idx' => array('msg_id', 'created'),
    ),
    'foreign keys' => array(
      'apb_queue_msg_id_fk' => array(
        'table' => 'apb_msg',
        'columns' => array('msg_id' => 'id'),
      ),
      'apb_queue_sub_id_fk' => array(
        'table' => 'apb_sub',
        'columns' => array('sub_id' => 'id'),
      ),
    ),
  );

  $schema['apb_test_scenario'] = array(
    'description' => "APubSub test scenarios",
    'fields' => array(
      'id' => array(
        'description' => "Internal int32 identifier",
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => "Name",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => "Serialized data blob",
        'type' => 'text',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => "Creation UNIX timestamp",
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Adds a few missing fields.
 */
function apb_update_7001() {
  db_add_field('apb_sub', 'extra', array(
    'description' => "Extra data for business layer",
    'type' => 'blob',
    'not null' => FALSE,
  ));
  db_add_field('apb_sub_map', 'extra', array(
    'description' => "Extra data for business layer",
    'type' => 'blob',
    'not null' => FALSE,
  ));
  db_add_field('apb_sub_map', 'accessed', array(
    'description' => "Last time a queued job accessed this subscriber",
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Remove a useless field.
 */
function apb_update_7002() {
  db_drop_field('apb_sub_map', 'extra');
}

/**
 * Adds the {apb_chan}.title column.
 */
function apb_update_7003() {
  if (!db_field_exists('apb_chan', 'title')) {
    db_add_field('apb_chan', 'title', array(
      'description' => "Optional human readable title",
      'type' => 'varchar',
      'length' => 1024,
      'not null' => FALSE,
    ));
  }
}

/**
 * Adds the {apb_queue}.id column.
 */
function apb_update_7004() {
  if (!db_field_exists('apb_queue', 'id')) {
    // We need to drop the table due to primary key constraints changes.
    db_query("CREATE TABLE {temp_apb_queue} AS SELECT * FROM {apb_queue}");
    db_drop_table('apb_queue');
    db_create_table('apb_queue', drupal_get_schema_unprocessed('apb', 'apb_queue'));
    db_query("INSERT INTO {apb_queue} (msg_id, sub_id, created, unread, read_timestamp) SELECT * FROM {temp_apb_queue}");
    // Could have used a temporary table but wasn't sure about the result.
    // Better have stalling data than lost data.
    db_drop_table('temp_apb_queue');
  }
}

<?php

/**
 * @file
 * APubSub module file.
 */

/**
 * Default backend class.
 */
const APB_DEFAULT_CLASS = '\APubSub\Backend\Drupal7\D7Backend';

/**
 * Define a custom autoloader if non declared, this prerequisite that the
 * library lives under the same folder hierarchy than the composer package.
 */
if (!class_exists('APubSub\BackendInterface')) {
  // In case no custom autoloader is provided, use the composer one.
  // In order to use it, you need to run "composer install" in the
  // APubSub folder root.
  $autoloadFile = __DIR__ . '/../../../vendor/autoload.php';
  if (file_exists($autoloadFile)) {
    require $autoloadFile;
  }
}

/**
 * Implements hook_menu().
 */
function apb_menu() {
  if (variable_get('apubsub_testing', FALSE)) {
    require_once __DIR__ . '/apb.testing.inc';
    return apb_testing_menu();
  } else {
    return array();
  }
}

/**
 * Menu helper.
 */
function apb_test_scenario_load($id) {
  $scenario = db_select('apb_test_scenario', 't')
    ->fields('t')
    ->condition('t.id', $id)
    ->execute()
    ->fetchObject();
  if ($scenario) {
    $scenario->data = unserialize($scenario->data);
    return $scenario;
  }
  return FALSE;
}

/**
 * Menu helper, please do not use directly.
 */
function apb_backend_load($name) {
  return apb_backend_get($name);
}

/**
 * List all known backends.
 *
 * @return array
 *   Configuration array.
 */
function apb_backend_list() {
  $backend_conf = &drupal_static(__FUNCTION__);

  if (null === $backend_conf) {
    $backend_conf = variable_get('apubsub_backend', array());

    if (!isset($backend_conf['default'])) {
      $backend_conf['default']['class'] = APB_DEFAULT_CLASS;
      $backend_conf['default']['info'] = t("Default backend");
    }
  }

  return $backend_conf;
}

/**
 * Helper for other modules, gives an options array suitable for select lists.
 *
 * @return array
 *   Keys are backend identifiers and values are backend names.
 */
function apb_backend_list_select_options() {
  $ret = array();

  foreach (apb_backend_list() as $name => $info) {
    if (isset($info['info'])) {
      $ret[$name] = $info['info'];
    } else {
      $ret[$name] = $name;
    }
  }

  return $ret;
}

/**
 * Get the APubSub backend.
 *
 * @return \APubSub\BackendInterface
 *   Pub/Sub backend.
 */
function apb_backend_get($name = 'default') {
  $backends = &drupal_static(__FUNCTION__, array());

  if (!isset($backends[$name])) {
    $conf = apb_backend_list();

    if (!isset($conf[$name])) {
      throw new InvalidArgumentException(sprintf("Backend '%s' does not exist", $name));
    }

    // First fetch configuration
    if (isset($conf[$name]['class'])) {
      $class = $conf[$name]['class'];

      if (!class_exists($class)) {
        throw new InvalidArgumentException(sprintf("Class '%s' does not exist", $class));
      }
    } else {
      $class = APB_DEFAULT_CLASS;
    }

    // Does a specific case for known backends.
    switch ($class) {

      case APB_DEFAULT_CLASS: 
        if (isset($conf[$name]['target'])) {
          $target = $conf[$name]['target'];
        } else {
          $target = 'default';
        }
        if (isset($conf[$name]['key'])) {
          $key = $conf[$name]['key'];
        } else {
          $key = NULL;
        }
        $backend = new $class(Database::getConnection($target, $key));
        break;

      default:
        $backend = new $class();
        break;
    }

    $backends[$name] = $backend;
  }

  return $backends[$name];
}

/**
 * Implements hook_cron().
 */
function apb_cron() {
  foreach (apb_backend_list() as $name => $info) {
    try {
      apb_backend_get($name)->garbageCollection();
    } catch (Exception $e) {
      // We cannot afford cron failure here, outdated data must be wiped
      // out no matter the cost, just leave some comprehensive exception
      // logging in case of any error
      watchdog_exception('apb', $e, sprintf("Backend name '%s' could not be instanciated", $name), NULL, WATCHDOG_ERROR);
    }
  }
}

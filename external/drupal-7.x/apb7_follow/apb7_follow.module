<?php

/**
 * @file
 * APubSub Follow module file.
 *
 * User notifications will be fetched using a subscriber instance. Everything
 * will happen with this instance, and almost never using directly subscriptions
 * instead (except for some rare edge case needs).
 *
 * Because the APubSub API deletes everything once messages have been fetched,
 * the user notifications will be stored into an LRU like persistent cache,
 * either directly in a cache bin, either in a persistent database table.
 */

use APubSub\CursorInterface;
use APubSub\Error\ChannelDoesNotExistException;
use APubSub\Error\SubscriptionDoesNotExistException;

use Apb\Notification\NotificationManager;

// This module exists for sample purposes: register a PSR-0 autoloader
// for our own library.
spl_autoload_register(function ($className) {
  if (false !== strpos($className, '\\')) {
    $parts = explode('\\', $className);
    if ('Apb' === $parts[0] && 'Notification' === $parts[1]) {
      $filename = __DIR__ . '/lib/' . implode('/', $parts) . '.php';
      if (file_exists($filename)) {
        return (bool)require_once $filename;
      }
    }
  }
  return false;
});

/**
 * Notification type for user following.
 */
const APB_TYPE_USER = 'u';

/**
 * Notification type for entity following.
 */
const APB_TYPE_ENTITY= 'e';

/**
 * Enable AJAX for notification block variable name.
 */
const APB_VAR_ENABLE_AJAX = 'apb_follow_enable_ajax';

/**
 * Enable AJAX for notification block default value.
 */
const APB_DEF_ENABLE_AJAX = false;

/**
 * Enable production mode variable name.
 */
const APB_VAR_ENABLE_PROD = 'apb_follow_enable_prod';

/**
 * Enable production mode default value.
 */
const APB_DEF_ENABLE_PROD = true;

/**
 * Implements hook_apb7_follow_type_info().
 */
function apb7_follow_apb7_follow_type_info() {
  return array(
    APB_TYPE_ENTITY => 'Apb\Notification\Formatter\EntityFormatter',
    APB_TYPE_USER   => 'Apb\Notification\Formatter\UserActionFormatter',
  );
}

// And still for sample purposes only, all triggers have been moved into a
// separate file for code readability purposes.
require_once __DIR__ . '/apb7_follow.triggers.inc';

/**
 * Implements hook_permission().
 */
function apb7_follow_permission() {
  return array(
    'follow other users' => array(
      'title'       => t("Follow other users"),
      'description' => t("Allow the user to follow other users messages."),
    ),
    'see notifications of all users' => array(
      'title'       => t("See notifications of all user profiles"),
      'description' => t("Users with this permission can manage other user's notifications, use this for moderation only."),
    ),
  );
}

/**
 * Menu access callback.
 */
function apb7_notification_user_access($account = null) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  return $account->uid != 0 && (user_access('see notifications of all users') || ($account->uid == $user->uid && user_access('follow other users')));
}

/**
 * Implements hook_menu().
 */
function apb7_follow_menu() {
  $items = array();

  // User preferences and pages.
  $items['user/%user/notifications'] = array(
    'title'            => "Notifications",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('apb7_notification_page_user_list', 1),
    'access callback'  => 'apb7_notification_user_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'             => 'apb7_follow.pages.inc',
  );
  $items['user/%user/notifications/settings'] = array(
    'title'            => "Preferences",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('apb7_notification_page_user_settings', 1),
    'access callback'  => 'apb7_notification_user_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK | MENU_VISIBLE_IN_BREADCRUMB,
    'file'             => 'apb7_follow.pages.inc',
  );

  // AJAX stuff
  $items['notifications/ajax/user'] = array(
    'title'            => "Preferences",
    'page callback'    => 'apb7_follow_ajax_user_notifications',
    'access callback'  => 'apb7_notification_user_access',
    'type'             => MENU_CALLBACK,
    'file'             => 'apb7_follow.ajax.inc',
  );

  // Site wide administration pages.
  $items['admin/config/people/notifications'] = array(
    'title'            => "Notifications",
    'description'      => "Enable or disable notifications globally and configuration the notifications behavior.",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('apb7_follow_admin_notification_overview'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'apb7_follow.admin.inc',
  );
  $items['admin/config/people/notifications/overview'] = array(
    'title'            => "Overview",
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/people/notifications/settings'] = array(
    'title'            => "Global settings",
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('apb7_follow_admin_notification_settings'),
    'access arguments' => array('administer site configuration'),
    'weight'           => 100,
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'apb7_follow.admin.inc',
  );

  return $items;
}

/**
 * Get notification manager.
 *
 * @return \Apb\Notification\NotificationManager
 */
function apb7_notification_manager_get() {
  $instance = &drupal_static(__FUNCTION__);

  if (NULL === $instance) {
    $instance = new NotificationManager(apb7_backend_get());
  }

  return $instance;
}

/**
 * Implements hook_theme().
 */
function apb7_follow_theme() {
  return array(
    'notifications_block' => array(
      'render element' => 'data',
      'template'       => 'notifications-block',
    ),
    'notifications_page' => array(
      'render element' => 'form',
      'template'       => 'notifications-page',
      'file'           => 'apb7_follow.pages.inc'
    ),
    'notifications_loader' => array(),
  );
}

/**
 * Implements hook_block_info().
 */
function apb7_follow_block_info() {
  return array(
    'follow_user' => array(
      'info'  => t("Follow displayed user (profile pages)"),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'follow_node' => array(
      'info'  => t("Follow displayed node (content pages)"),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'notifications' => array(
      'info'  => t("Current user notifications"),
      'cache' => variable_get(APB_VAR_ENABLE_AJAX, APB_DEF_ENABLE_AJAX) ? DRUPAL_CACHE_GLOBAL : DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 *
 * Defines styles for notification images (being displayed at various places
 * of the site). For example, 32x32 variant will be displayed in current
 * notifications block list, while the 64x64 variant will mostly be used
 * in page listings.
 */
function apb7_follow_image_default_styles() {
  return array(
    'icon-32' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 32,
            'height' => 32,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'icon-64' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 64,
            'height' => 64,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
  );
}

/**
 * Tell if the entity type follow operation is supported.
 *
 * @param string $type
 *   Entity type.
 *
 * @return bool
 *   True if supported.
 */
function apb7_follow_entity_type_is_supported($type) {
  return 'node' === $type;
}

/**
 * Implements hook_block_view().
 */
function apb7_follow_block_view($delta = '') {
  global $user;

  switch ($delta) {

    case 'follow_user':
      if (($account = menu_get_object('user')) && !arg(2)) {
        return array(
          'subject' => t("Follow"),
          'content' => drupal_get_form('apb7_follow_account_link_form', $account->uid, APB_TYPE_USER),
        );
      }
      break;

    case 'follow_node':
      if ($node = menu_get_object('node')) {
        return array(
          'subject' => t("Follow"),
          'content' => drupal_get_form('apb7_follow_account_link_form', $node->nid, APB_TYPE_ENTITY),
        );
      }
      break;

    case 'notifications':

      $block = array(
        'content' => array(
          // Stupid Drupal is stupid, and will move out your div over the
          // block if you don't wrap it inside.
          'inside' => array(
            '#prefix' => '<div id="notifications">',
            '#suffix' => '</div>',
          ),
        ),
      );

      // Should move out into a hook_library_info() maybe.
      drupal_add_css(drupal_get_path('module', 'apb7_follow') . '/apb7_follow.css');

      if (variable_get(APB_VAR_ENABLE_PROD, APB_DEF_ENABLE_PROD)) {
        drupal_add_js(drupal_get_path('module', 'apb7_follow') . '/notifications-block.min.js');
      } else {
        drupal_add_js(drupal_get_path('module', 'apb7_follow') . '/notifications-block.js');
      }

      if (variable_get(APB_VAR_ENABLE_AJAX, APB_DEF_ENABLE_AJAX)) {
        drupal_add_js(array(
          'notifications' => array(
            'enabled'    => TRUE,
            'refreshUrl' => url('notifications/ajax/user'),
          ),
        ), 'setting');
        $block['content']['inside']['#markup'] = theme('notifications_loader');
      } else {
        $block['content']['inside'] += apb7_follow_notification_render_block($user);
      }

      return $block;
    }
}

/**
 * Render the follow form for the given account.
 */
function apb7_follow_account_link_form($form, &$form_state, $targetId, $targetType) {

  global $user;

  $manager    = apb7_notification_manager_get();
  $chanId     = $manager->getChanId($targetType, $targetId);
  $subscriber = $manager->getSubscriberFor($user->uid);

  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $chanId,
  );
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $subscriber->getId(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
  );

  try {
    $subscription = $subscriber->getSubscriptionFor($chanId);
    $form['submit']['#value'] = t("Unfollow");
  } catch (SubscriptionDoesNotExistException $e) {
    $form['submit']['#value'] = t("Follow");
  }

  if (!user_access('follow other users')) {
    // But leave it displayed to make him wanna do it!
    $form['submit']['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Follow form submit handler.
 */
function apb7_follow_account_link_form_submit($form, &$form_state) {

  $chanId       = $form_state['values']['cid'];
  $subscriberId = $form_state['values']['sid'];
  $manager      = apb7_notification_manager_get();
  $backend      = $manager->getBackend();
  $subscriber   = $backend->getSubscriber($subscriberId);

  try {
    $subscription = $subscriber->getSubscriptionFor($chanId);
    $subscription->delete();
    drupal_set_message(t("You are not following this channel!"));
  } catch (SubscriptionDoesNotExistException $e) {
    try {
      $subscriber->subscribe($chanId);
      drupal_set_message(t("You are now following this channel!"));
    } catch (ChannelDoesNotExistException $e) {
      // Lazy channel registration for this user account.
      $channel = $backend->createChannel($chanId);
      $subscriber->subscribe($chanId);
      drupal_set_message(t("You are now following this channel!"));
    }
  }
}

/**
 * Render a single image.
 *
 * @param string $uri
 * @param int $size
 *
 * @return string|array
 *   drupal_render() friendly structure.
 */
function apb7_follow_image_render($uri, $size = 32) {

  $scheme = null;
  $path   = null;
  $size   = (int)$size;
  $build  = array();

  if (FALSE !== strpos($uri, '://')) {
    list($scheme, $path) = explode('://', $uri);
  }

  if (null === $scheme || 'icon' === $scheme) {
    if (!function_exists('stockicon_get')) {
      return;
    }
    if ($uri = stockicon_get()->renderIcon($path, $size . 'x' . $size)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  } else {
    // We support only a few styles for user images. Please use stock icon
    // whenever you can.
    switch ($size) {

      case 32:
        $style = 'icon-32';
        break;

      case 64:
        $style = 'icon-64';
        break;

      default:
        return;
    }

    if ($uri = image_style_url($style, $uri)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  }

  return $build;
}

/**
 * Render the notifications for the given user account.
 *
 * This method demonstrate how to use a custom implementation of QueueMessage
 * and how to iterate over the locale queue cache. Code is quite straight
 * forward to understand, it's mostly dealing with HTML code building.
 *
 * @param object $account
 *   Subscriber account.
 */
function apb7_follow_notification_render_block($account) {

  $build = array(
    '#theme' => 'notifications_block',
    '#list'  => array(),
  );

  $manager     = apb7_notification_manager_get();
  $subscriber  = $manager->getSubscriberFor($account->uid); 

  $unreadCount = 0;
  $totalCount  = 0;
  $unreadTitle = null;
  $totalTitle  = null;

  $cursor = $subscriber
    ->fetch()
    ->addSort(
      CursorInterface::FIELD_MSG_SENT,
      CursorInterface::SORT_DESC);

  foreach ($cursor as $message) {

    $notification = $manager->getNotification($message);

    if (!$notification->isValid()) {
        continue;
    }

    ++$totalCount;

    if ($message->isUnread()) {
      ++$unreadCount;

      // This should be done at the discretion of the business layer.
      // FIXME $message->setUnread(false);
    }

    if ($uri = $notification->getImageUri()) {
      $image = apb7_follow_image_render($uri);
    } else {
      $image = '';
    }

    $build['#list'][] = array(
      'image'  => $image,
      'time'   => $message->getSendTimestamp(),
      'text'   => $notification->format(),
      'unread' => $message->isUnread(),
    );
  }

  // Build header
  if ($unreadCount) {
    $unreadTitle = format_plural($unreadCount, "@count unread message", "@count unread messages");
  } else {
    $unreadTitle = '';
  }
  $totalTitle = format_plural($totalCount, "@count message", "@count messages");

  $build['#unread_count'] = $unreadCount;
  $build['#unread_title'] = $unreadTitle;
  $build['#total_count']  = $totalCount;
  $build['#total_title']  = $totalTitle;
  $build['#real_total']   = $cursor->getTotalCount();

  return $build;
}

/**
 * Notifications loader, very simple.
 */
function theme_notifications_loader() {

  $attributes = array(
    'title'  => t("Loading notifications..."),
    'style'  => "width: 15px; height: 15px; background: url(" . base_path() . 'misc/throbber.gif' . ") no-repeat 0 -18px;",
  );

  return '<div'. drupal_attributes($attributes) . '></div>';
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_notifications_block(&$variables) {

  global $user;

  $data = $variables['data'];

  $variables += array(
    'unread_count' => $data['#unread_count'],
    'unread_title' => $data['#unread_title'],
    'total_count'  => $data['#total_count'],
    'total_title'  => $data['#total_title'],
    'real_total'   => $data['#real_total'],
    'list'         => $data['#list'],
    'all_link'     => l(t("See all"), 'user/' . $user->uid . '/notifications', array('attributes' => array('class' => array('all-link')))),
    'pref_link'    => l(t("Preferences"), 'user/' . $user->uid . '/notifications/settings', array('attributes' => array('class' => array('pref-link')))),
  );
}

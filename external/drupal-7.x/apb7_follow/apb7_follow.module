<?php

/**
 * @file
 * APubSub Follow module file.
 *
 * User notifications will be fetched using a subscriber instance. Everything
 * will happen with this instance, and almost never using directly subscriptions
 * instead (except for some rare edge case needs).
 *
 * Because the APubSub API deletes everything once messages have been fetched,
 * the user notifications will be stored into an LRU like persistent cache,
 * either directly in a cache bin, either in a persistent database table.
 */

use APubSub\CursorInterface;
use APubSub\Error\ChannelDoesNotExistException;
use APubSub\Error\SubscriptionDoesNotExistException;
use APubSub\MessageInterface;

use Apb\Follow\Notification;
use Apb\Follow\TypeRegistry;

// This module exists for sample purposes: register a PSR-0 autoloader
// for our own library.
spl_autoload_register(function ($className) {
  if (false !== strpos($className, '\\')) {
    $parts = explode('\\', $className);
    if ('Apb' === $parts[0] && 'Follow' === $parts[1]) {
      $filename = __DIR__ . '/lib/' . implode('/', $parts) . '.php';
      if (file_exists($filename)) {
        return (bool)require_once $filename;
      }
    }
  }
  return false;
});

/**
 * Follow a user
 */
const APB_TYPE_USER = 'u';

/**
 * Follow a node
 */
const APB_TYPE_ENTITY= 'e';

/**
 * Implements hook_apb7_follow_type_info().
 */
function apb7_follow_apb7_follow_type_info() {
  return array(
    APB_TYPE_ENTITY => 'Apb\Follow\Notification\EntityNotificationType',
    APB_TYPE_USER   => 'Apb\Follow\Notification\UserNotificationType',
  );
}

// And still for sample purposes only, all triggers have been moved into a
// separate file for code readability purposes.
require_once __DIR__ . '/apb7_follow.triggers.inc';

/**
 * Implements hook_permission().
 */
function apb7_follow_permission() {
  return array(
    'follow other users' => array(
      'title' => t("Follow other users"),
      'description' => t("Allow the user to follow other users messages"),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function apb7_follow_menu() {
  $items = array();
/*
  $items['user/%user/subscriptions'] = array(
    'title' => "Notifications",
    'page callback' => '',
    'page arguments' => '',
    
  );
 */
  return $items;
}

/**
 * Implements hook_theme().
 */
function apb7_follow_theme() {
  return array(
    'notifications_block' => array(
      'render element' => 'data',
      'template'       => 'notifications-block',
    ),
    'notifications_page' => array(
      'render element' => 'data',
      'template'       => 'notifications-page',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function apb7_follow_block_info() {
  return array(
    'follow_user' => array(
      'info' => t("Follow displayed user (profile pages)"),
    ),
    'follow_node' => array(
      'info' => t("Follow displayed node (content pages)"),
    ),
    'notifications' => array(
      'info' => t("Current user notifications"),
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 *
 * Defines styles for notification images (being displayed at various places
 * of the site). For example, 32x32 variant will be displayed in current
 * notifications block list, while the 64x64 variant will mostly be used
 * in page listings.
 */
function apb7_follow_image_default_styles() {
  return array(
    'icon-32' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 32,
            'height' => 32,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
    'icon-64' => array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 64,
            'height' => 64,
            'upscale' => 1,
          ),
          'weight' => 0,
        ),
      ),
    ),
  );
}

/**
 * Get user key for subscriber or channel name.
 *
 * For convenience, users channel and subscriber instances will always have the
 * same name. We are not dealing with multiple channels per user here.
 *
 * @param int $id
 *   Object identifier.
 * @param string $type
 *   Object type.
 *
 * @return string
 *   key.
 */
function apb7_follow_user_key($id, $type) {
  return 'n:' . $type . ':' . $id;
}

/**
 * Tell if the entity type follow operation is supported.
 *
 * @param string $type
 *   Entity type.
 *
 * @return bool
 *   True if supported.
 */
function apb7_follow_entity_type_is_supported($type) {
  return 'node' === $type;
}

/**
 * Get formatter registry.
 *
 * @return \Apb\Follow\TypeRegistry
 *   Formatter registry.
 */
function apb7_follow_type_registry_get() {
  static $registry;

  if (null === $registry) {
    $registry = new TypeRegistry();
  }

  return $registry;
}

/**
 * Implements hook_block_view().
 */
function apb7_follow_block_view($delta = '') {
  global $user;

  switch ($delta) {

    case 'follow_user':
      if ($account = menu_get_object('user')) {
        return array(
          'subject' => t("Follow"),
          'content' => drupal_get_form('apb7_follow_account_link_form', $account->uid, APB_TYPE_USER),
        );
      }
      break;

    case 'follow_node':
      if ($node = menu_get_object('node')) {
        return array(
          'subject' => t("Follow"),
          'content' => drupal_get_form('apb7_follow_account_link_form', $node->nid, APB_TYPE_ENTITY),
        );
      }
      break;

    case 'notifications':
      return array(
        'content' => apb7_follow_notification_render_block($user),
      );
  }
}

/**
 * Render the follow form for the given account.
 */
function apb7_follow_account_link_form($form, &$form_state, $targetId, $targetType) {

  global $user;

  $chanId       = apb7_follow_user_key($targetId, $targetType);
  $subscriberId = apb7_follow_user_key($user->uid, APB_TYPE_USER);
  $backend      = apb7_backend_get();
  $subscriber   = $backend->getSubscriber($subscriberId);

  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $chanId,
  );
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $subscriberId,
  );

  $form['submit'] = array(
    '#type' => 'submit',
  );

  try {
    $subscription = $subscriber->getSubscriptionFor($chanId);
    $form['submit']['#value'] = t("Unfollow");
  } catch (SubscriptionDoesNotExistException $e) {
    $form['submit']['#value'] = t("Follow");
  }

  if (!user_access('follow other users')) {
    // But leave it displayed to make him wanna do it!
    $form['submit']['#disabled'] = TRUE;
  }

  return $form;
}

/**
 * Follow form submit handler.
 */
function apb7_follow_account_link_form_submit($form, &$form_state) {

  $chanId       = $form_state['values']['cid'];
  $subscriberId = $form_state['values']['sid'];
  $backend      = apb7_backend_get();
  $subscriber   = $backend->getSubscriber($subscriberId);

  try {
    $subscription = $subscriber->getSubscriptionFor($chanId);
    $subscription->delete();
    drupal_set_message(t("You are not following this channel!"));
  } catch (SubscriptionDoesNotExistException $e) {
    try {
      $subscriber->subscribe($chanId);
      drupal_set_message(t("You are now following this channel!"));
    } catch (ChannelDoesNotExistException $e) {
      // Lazy channel registration for this user account.
      $channel = $backend->createChannel($chanId);
      $subscriber->subscribe($chanId);
      drupal_set_message(t("You are now following this channel!"));
    }
  }
}

/**
 * Render a single image.
 *
 * @param string $uri
 * @param int $size
 *
 * @return string|array
 *   drupal_render() friendly structure.
 */
function apb7_follow_image_render($uri, $size = 32) {

  $scheme = null;
  $path   = null;
  $size   = (int)$size;
  $build  = array();

  if (FALSE !== strpos($uri, '://')) {
    list($scheme, $path) = explode('://', $uri);
  }

  if (null === $scheme || 'icon' === $scheme) {
    if (!function_exists('stockicon_get')) {
      return;
    }
    if ($uri = stockicon_get()->renderIcon($path, $size . 'x' . $size)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  } else {
    // We support only a few styles for user images. Please use stock icon
    // whenever you can.
    switch ($size) {

      case 32:
        $style = 'icon-32';
        break;

      case 64:
        $style = 'icon-64';
        break;

      default:
        return;
    }

    if ($uri = image_style_url($style, $uri)) {
      $build['#markup'] = theme('image', array('path' => $uri));
    }
  }

  return $build;
}

/**
 * Render the notifications for the given user account.
 *
 * This method demonstrate how to use a custom implementation of QueueMessage
 * and how to iterate over the locale queue cache. Code is quite straight
 * forward to understand, it's mostly dealing with HTML code building.
 *
 * @param object $account
 *   Subscriber account.
 */
function apb7_follow_notification_render_block($account) {

  $build            = array('#theme' => 'notifications_block');

  $key              = apb7_follow_user_key($account->uid, APB_TYPE_USER);
  $subscriber       = apb7_backend_get()->getSubscriber($key); 
  $registry         = apb7_follow_type_registry_get();

  $unreadCount = 0;
  $totalCount  = 0;
  $unreadTitle = null;
  $totalTitle  = null;

  $cursor = $subscriber
    ->fetch()
    ->addSort(
      CursorInterface::FIELD_MSG_SENT,
      CursorInterface::SORT_DESC);

  foreach ($cursor as $message) {

    $notification = new Notification($message);

    if (!$notification->isValid()) {
        continue;
    }

    ++$totalCount;

    $type = $registry->getInstance($notification->getType());

    if ($message->isUnread()) {
      ++$unreadCount;

      // This should be done at the discretion of the business layer.
      // FIXME $message->setUnread(false);
    }

    $text = $type->format($notification);

    if ($uri = $type->getUri($notification)) {
      $text = l($text, $uri, array('html' => TRUE));
    }

    if ($uri = $type->getImageURI($notification)) {
      // @todo Switch to render array
      $image = apb7_follow_image_render($uri);
    } else {
      $image = '';
    }

    $build['#list'][] = array(
      'image'  => $image,
      'time'   => $message->getSendTimestamp(),
      'text'   => $type->format($notification),
      'unread' => $message->isUnread(),
    );
  }

  // Build header
  if ($unreadCount) {
    $unreadTitle = format_plural($unreadCount, "@count unread message", "@count unread messages");
  } else {
    $unreadTitle = '';
  }
  $totalTitle = format_plural($totalCount, "@count message", "@count messages");

  $build['#unread_count'] = $unreadCount;
  $build['#unread_title'] = $unreadTitle;
  $build['#total_count']  = $totalCount;
  $build['#total_title']  = $totalTitle;
  $build['#real_total']   = $cursor->getTotalCount();

  return $build;
}

/**
 * Implements template_preprocess_HOOK().
 */
function template_preprocess_notifications_block(&$variables) {

  drupal_add_css(drupal_get_path('module', 'apb7_follow') . '/apb7_follow.css');
  drupal_add_js(drupal_get_path('module', 'apb7_follow') . '/apb7_follow.js');

  $data = $variables['data'];

  $variables += array(
    'unread_count' => $data['#unread_count'],
    'unread_title' => $data['#unread_title'],
    'total_count'  => $data['#total_count'],
    'total_title'  => $data['#total_title'],
    'real_total'   => $data['#real_total'],
    'list'         => $data['#list'],
  );
}
